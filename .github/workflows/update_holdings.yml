name: "Update Holdings & Quotes"

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq nodejs npm

      - name: Fetch Logos from Airtable with Debug Logging
        env:
          AIRTABLE_PAT: ${{ secrets.AIRTABLE_PAT }}
        run: |
          echo "Fetching logos from Airtable..."
          curl -sSL -D headers_logos.txt \
            -H "Authorization: Bearer ${AIRTABLE_PAT}" \
            "https://api.airtable.com/v0/appZEmpmx9gs4yATK/tblfqaxUHA0XvxQgm?maxRecords=3000" \
            -o logosRaw.json
          echo "HTTP headers for logos:"
          cat headers_logos.txt
          echo "===== Logos Raw Response ====="
          cat logosRaw.json

      - name: Verify Logos JSON and Debug
        run: |
          if ! jq -e '.records' logosRaw.json >/dev/null; then
            echo "Error: logosRaw.json does not contain a 'records' field."
            echo "Here is the contents of logosRaw.json:"
            cat logosRaw.json
            exit 1
          fi

      - name: Flatten Logos Data
        run: |
          echo "Flattening Logos Data..."
          jq '.records | map({
            "Ticker": .fields.Ticker,
            "Logo": (.fields.Logo[0].url // "")
          })' logosRaw.json > logosClean.json
          echo "===== logosClean.json ====="
          cat logosClean.json

      - name: Prepare Ticker List
        run: |2
          cat <<'EOF' > buildTickers.js
          const fs = require('fs');
          // Read the logos data and extract base tickers
          let logos = JSON.parse(fs.readFileSync('logosClean.json', 'utf8'));
          function stripCountry(t) {
            return t.split(':')[0];
          }
          let tickers = logos.map(l => stripCountry(l.Ticker));
          // Remove duplicates
          tickers = [...new Set(tickers)];
          // Limit to 10 tickers (adjust selection logic as needed)
          tickers = tickers.slice(0, 10);
          // Append SPY ticker
          tickers.push("SPY");
          fs.writeFileSync('tiingoTickers.txt', tickers.join(','), 'utf8');
          console.log("Selected tickers:", tickers);
          EOF
          node buildTickers.js
          echo "==== TICKERS FOR TIINGO ===="
          cat tiingoTickers.txt

      - name: Fetch from Tiingo
        env:
          TIINGO_API_KEY: ${{ secrets.TIINGO_API_KEY }}
        run: | 
          TICKERS=$(cat tiingoTickers.txt)
          echo "Fetching Tiingo quotes for: $TICKERS"
          curl -sSL "https://api.tiingo.com/iex/?tickers=$TICKERS&token=${TIINGO_API_KEY}" \
            -o tiingoRaw.json
          echo "===== tiingoRaw.json ====="
          cat tiingoRaw.json

      - name: Merge & Pick Final Tickers
        run: |2
          cat <<'EOF' > merge.js
          const fs = require('fs');
          // Helper to strip country code (e.g. "XYZ:USA" -> "XYZ")
          function stripCountry(t) {
            return t.split(':')[0];
          }
          // Read the selected tickers list
          const tickersList = fs.readFileSync('tiingoTickers.txt', 'utf8').split(',');
          
          // Read Tiingo data and build a map keyed by ticker
          let tiingoRaw = JSON.parse(fs.readFileSync('tiingoRaw.json', 'utf8'));
          let tiingoMap = {};
          tiingoRaw.forEach(item => {
            let price = (item.last == null) ? item.tngoLast : item.last;
            let prev = item.prevClose || 0;
            let ret = price - prev;
            tiingoMap[item.ticker] = { price, prevClose: prev, absReturn: ret };
          });
          
          // Read logos data and build a map keyed by base ticker
          let logos = JSON.parse(fs.readFileSync('logosClean.json', 'utf8'));
          let logoMap = {};
          logos.forEach(l => {
            let baseT = stripCountry(l.Ticker || '');
            logoMap[baseT] = l.Logo;
          });
          
          // Build final merged data for each ticker in our list.
          let merged = tickersList.map(ticker => {
            let info = tiingoMap[ticker] || { price: 0, prevClose: 0, absReturn: 0 };
            let logo = "";
            if (ticker === "SPY") {
              // Use the local image for SPY.
              logo = "sp500.png";
            } else {
              logo = logoMap[ticker] || "";
            }
            return {
              fullTicker: ticker,
              baseTicker: ticker,
              price: info.price,
              prevClose: info.prevClose,
              absReturn: info.absReturn,
              logo: logo
            };
          });
          
          fs.writeFileSync('data.json', JSON.stringify(merged, null, 2), 'utf8');
          console.log('Final selection =>', merged);
          EOF
          node merge.js
          echo "===== FINAL data.json ====="
          cat data.json

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data.json
          git commit -m "Update final ticker selection" || exit 0
          git push origin HEAD:main
