      - name: Fetch & paginate Rankings_sample from Airtable
        env:
          AIRTABLE_PAT: ${{ secrets.AIRTABLE_PAT }}
        run: |
          set -euo pipefail

          BASE_URL="https://api.airtable.com/v0/appZEmpmx9gs4yATK/tblBvqS8O86NVAHkK"
          VIEW_ID="viwvLWdihqsICFTmv"
          FIELDS=(
            "fields[]=Ticker"
            "fields[]=Rank%20(from%20Rank)"
            "fields[]=Description%20(from%20Descriptions)%20(from%20Rank)"
            "fields[]=Logo%20(from%20Logo)%20(from%20Rank)"
          )

          # start with empty array
          echo '{"records":[]}' > sampleRaw.json

          OFFSET=""
          while :; do
            # build URL (include offset if present)
            URL="${BASE_URL}?view=${VIEW_ID}&${FIELDS[*]}"
            if [ -n "$OFFSET" ]; then
              URL="${URL}&offset=${OFFSET}"
            fi

            # fetch a page
            curl -sSL \
              -H "Authorization: Bearer ${AIRTABLE_PAT}" \
              "$URL" > page.json

            # extract new offset
            OFFSET=$(jq -r '.offset // ""' page.json)

            # merge this page's records into sampleRaw.json
            jq -s '{
               records: (.[0].records + .[1].records)
            }' sampleRaw.json page.json > merged.json

            mv merged.json sampleRaw.json

            # break if no more pages
            if [ -z "$OFFSET" ]; then
              break
            fi
          done

          echo "==== all pages combined ===="
          jq '.records | length as $n | "total records: \($n)", .records' sampleRaw.json

      - name: Flatten sample data
        run: |
          jq '.records | map({
            Ticker:      .fields.Ticker,
            Rank:        (.fields["Rank (from Rank)"][0] // ""),
            Description: (.fields["Description (from Descriptions) (from Rank)"][0] // ""),
            Logo:        (.fields["Logo (from Logo) (from Rank)"][0]?.url // "")
          })' sampleRaw.json > sampleClean.json

          echo "===== sampleClean.json ====="
          cat sampleClean.json
