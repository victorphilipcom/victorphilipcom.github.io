name: Update Holdings & Quotes

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo apt-get install -y nodejs npm

      ######################################################
      # 1) FETCH AIRTABLE DATA (Algorithm1_holdings & Logos)
      ######################################################
      - name: Fetch Algorithm1_holdings with Debug Logging
        env:
          AIRTABLE_PAT: ${{ secrets.AIRTABLE_PAT }}
        run: |
          echo "Fetching holdings from Airtable..."
          curl -sSL -w "\nHTTP_STATUS:%{http_code}\n" \
            -H "Authorization: Bearer ${AIRTABLE_PAT}" \
            "https://api.airtable.com/v0/appZEmpmx9gs4yATK/Algorithm1_holdings?maxRecords=30" \
          > holdingsRaw.json

          echo "===== Holdings Raw Response ====="
          cat holdingsRaw.json

      - name: Flatten Algorithm1_holdings
        run: |
          # Process the JSON only if it contains the "records" field.
          if jq -e '.records' holdingsRaw.json >/dev/null; then
            jq '.records | map({
               "Ticker": .fields.Ticker,
               "Rank": ( .fields.Rank // 9999 )
             })' holdingsRaw.json > holdingsClean.json
            echo "===== holdingsClean.json ====="
            cat holdingsClean.json
          else
            echo "Error: holdingsRaw.json does not contain a 'records' field."
            exit 1
          fi

      - name: Fetch Logos table with Debug Logging
        env:
          AIRTABLE_PAT: ${{ secrets.AIRTABLE_PAT }}
        run: |
          echo "Fetching logos from Airtable..."
          curl -sSL -w "\nHTTP_STATUS:%{http_code}\n" \
            -H "Authorization: Bearer ${AIRTABLE_PAT}" \
            "https://api.airtable.com/v0/appZEmpmx9gs4yATK/Logos?maxRecords=80" \
          > logosRaw.json

          echo "===== Logos Raw Response ====="
          cat logosRaw.json

      - name: Flatten Logos
        run: |
          if jq -e '.records' logosRaw.json >/dev/null; then
            jq '.records | map({
               "Ticker": .fields.Ticker,
               "Logo": .fields.Logo
             })' logosRaw.json > logosClean.json
            echo "===== logosClean.json ====="
            cat logosClean.json
          else
            echo "Error: logosRaw.json does not contain a 'records' field."
            exit 1
          fi

      ######################################################
      # 2) BUILD TICKER LIST FOR TIINGO
      ######################################################
      - name: Prepare Ticker List
        run: |
          echo "const fs = require('fs');

          let holdings = JSON.parse(fs.readFileSync('holdingsClean.json','utf8'));
          function stripCountry(t) {
            return t.split(':')[0];
          }
          let baseTickers = holdings.map(h => stripCountry(h.Ticker));
          baseTickers = [...new Set(baseTickers.filter(Boolean))];
          fs.writeFileSync('tiingoTickers.txt', baseTickers.join(','),'utf8');
          " > buildTickers.js

          node buildTickers.js
          echo "==== TICKERS FOR TIINGO ===="
          cat tiingoTickers.txt

      ######################################################
      # 3) FETCH TIINGO QUOTES
      ######################################################
      - name: Fetch from Tiingo
        env:
          TIINGO_API_KEY: ${{ secrets.TIINGO_API_KEY }}
        run: |
          TICKERS=$(cat tiingoTickers.txt)
          echo "Fetching Tiingo quotes for: $TICKERS"
          curl -sSL "https://api.tiingo.com/iex/?tickers=$TICKERS&token=${TIINGO_API_KEY}" > tiingoRaw.json
          echo "===== tiingoRaw.json ====="
          cat tiingoRaw.json

      ######################################################
      # 4) MERGE + PICK 8 TICKERS IN A NODE SCRIPT
      ######################################################
      - name: Merge & Pick Final 8
        run: |
          echo "const fs = require('fs');

          function stripCountry(t) {
            return t.split(':')[0];
          }

          let holdings = JSON.parse(fs.readFileSync('holdingsClean.json','utf8'));
          let logos = JSON.parse(fs.readFileSync('logosClean.json','utf8'));
          let tiingoRaw = JSON.parse(fs.readFileSync('tiingoRaw.json','utf8'));

          let tiingoMap = {};
          tiingoRaw.forEach(item => {
            let price = (item.last == null) ? item.tngoLast : item.last;
            let prev = item.prevClose || 0;
            let ret = price - prev;
            tiingoMap[item.ticker] = {
              ticker: item.ticker,
              price: price,
              prevClose: prev,
              absReturn: ret
            };
          });

          let logoMap = {};
          logos.forEach(l => {
            let baseT = stripCountry(l.Ticker || '');
            let logoURL = (typeof l.Logo === 'string') ? l.Logo : '';
            logoMap[baseT] = logoURL;
          });

          let merged = holdings.map(h => {
            let baseT = stripCountry(h.Ticker || '');
            let info = tiingoMap[baseT] || {};
            let logo = logoMap[baseT] || '';
            return {
              fullTicker: h.Ticker,
              baseTicker: baseT,
              rank: h.Rank,
              price: info.price || 0,
              prevClose: info.prevClose || 0,
              absReturn: info.absReturn || 0,
              logo: logo
            };
          });

          let positives = merged.filter(m => m.absReturn > 0);
          let negatives = merged.filter(m => m.absReturn <= 0);
          positives.sort((a,b) => a.rank - b.rank);
          negatives.sort((a,b) => a.rank - b.rank);

          let finalSelection = [];
          if(positives.length >= 6){
            let topPos = positives.slice(0,6);
            let leftoverPos = positives.slice(6);
            let needed = 8 - 6;
            let fromPos = leftoverPos.slice(0, needed);
            if(fromPos.length < needed){
              let stillNeeded = needed - fromPos.length;
              let fromNeg = negatives.slice(0, stillNeeded);
              finalSelection = [...topPos, ...fromPos, ...fromNeg];
            } else {
              finalSelection = [...topPos, ...fromPos];
            }
          } else {
            let topPos = positives;
            let needed = 8 - topPos.length;
            let topNeg = negatives.slice(0, needed);
            finalSelection = [...topPos, ...topNeg];
          }
          finalSelection.sort((a,b) => a.rank - b.rank);
          fs.writeFileSync('data.json', JSON.stringify(finalSelection, null, 2), 'utf8');
          console.log('Final selection =>', finalSelection);
          " > merge.js

          node merge.js
          echo "===== FINAL data.json ====="
          cat data.json

      ######################################################
      # 5) COMMIT data.json
      ######################################################
      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data.json
          git commit -m "Update final ticker selection" || exit 0
          git push origin HEAD:main
